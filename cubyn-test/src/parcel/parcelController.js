var express = require('express');
var router = express.Router();
var bodyParser = require('body-parser');

router.use(bodyParser.urlencoded({ extended: true }));
router.use(bodyParser.json());

var Parcel = require('./parcel');

// Get parcel list
router.get('/', function (req, res) {
    Parcel.find({}, function (err, parcels) {
        if (err) {
            console.log(err)
            return res.status(500).send("Internal server error");
        }
        res.status(200).send(parcels);
    });
});

// Create new parcel
router.post('/', function (req, res) {
    Parcel.create(req.body, function (err, parcel) {
        if (err) {
            if (err.name=="ValidationError"){
                return res.status(400).send(Object.values(err.errors).map(e => e.message))
            } else {
                console.log(err);
                return res.status(500).send("Internal server error");
            }
        }
        res.status(201).send(parcel);
    });
});

// Get parcel detail
router.get('/:id', function (req, res) {
    // TODO: Here, we use _id generated by mongodb. It will be better to have a simple reference as an unique primary key you can modify.
    if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)){
        return res.status(404).send("No parcel found for id " + req.params.id + ", id is invalid");
    }
    Parcel.findById(req.params.id, function (err, parcel) {
        if (err) {
            console.log(err)
            return res.status(500).send("Internal server error");
        }
        if (!parcel) {
            return res.status(404).send("No parcel found for id " + req.params.id);
        }
        res.status(200).send(parcel);
    });
});

// Get parcel price
router.get('/:id/price', function (req, res) {
    // TODO: Here, we use _id generated by mongodb. It will be better to have a simple reference as an unique primary key you can modify.
    if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)){
        return res.status(404).send("No parcel found for id " + req.params.id + ", id is invalid");
    }
    Parcel.findById(req.params.id, function (err, parcel) {
        if (err) {
            console.log(err)
            return res.status(500).send("Internal server error");
        }
        if (!parcel) {
            return res.status(404).send("No parcel found for id " + req.params.id);
        }
        res.status(200).send(parcel.estimatePrice() + "â‚¬");
    });
});

// Delete a parcel
router.delete('/:id', function (req, res) {
    // TODO: Here, we use _id generated by mongodb. It will be better to have a simple reference as an unique primary key you can modify.
    if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)){
        return res.status(404).send("No parcel found for id " + req.params.id + ", id is invalid");
    }
    Parcel.findByIdAndRemove(req.params.id, function (err, parcel) {
        if (err) {
            console.log(err)
            return res.status(500).send("Internal server error");
        }
        res.status(204).send();
    });
});

// Update a parcel
router.put('/:id', function (req, res) {
    // TODO: Here, we use _id generated by mongodb. It will be better to have a simple reference as an unique primary key you can modify.
    if (!req.params.id.match(/^[0-9a-fA-F]{24}$/)){
        return res.status(404).send("No parcel found for id " + req.params.id + ", id is invalid");
    }
    // TODO: Put as create
    Parcel.findByIdAndUpdate(req.params.id, req.body, {runValidators: true}, function (err, parcel) {
        if (err) {
            if (err.name=="ValidationError"){
                return res.status(400).send(Object.values(err.errors).map(e => e.message))
            } else {
                console.log(err);
                return res.status(500).send("Internal server error");
            }
        }
        if (!parcel) {
            return res.status(404).send("No parcel found for id " + req.params.id);
        }
        res.status(200).send(parcel);
    });
});

module.exports = router;